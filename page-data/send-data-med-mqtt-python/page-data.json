{"componentChunkName":"component---src-templates-post-jsx","path":"/send-data-med-mqtt-python/","result":{"data":{"site":{"siteMetadata":{"title":"mikkelrask.github.io"}},"markdownRemark":{"id":"d66728e3-5bb7-5918-8b40-1789a8a4ff4f","excerpt":"Et af de emner jeg ser som et naturligt next step for mit home-lab eventyr, kunne sagtens være at nørde noget mere med MQTT. Det er kæmpestort i home automation miljøet, men ud over dét er det en, i …","html":"<p>Et af de emner jeg ser som et naturligt <em>next step</em> for mit <em>home-lab</em> eventyr, kunne sagtens være at nørde noget mere med <a href=\"https://www.youtube.com/watch?v=NXyf7tVsi10\"><strong>MQTT</strong></a>. Det er kæmpestort i home automation miljøet, men ud over dét er det en, i mine øjne, ret overset protokol, man kan bruge til alt muligt! I dag laver jeg et bare-bones script i python til, hvordan man kommer igang med at publish MQTT messages til sin broker, med specifikke topics.</p>\n<h2>MQTT &#x26; decouple</h2>\n<p>Men da vi jo ikke er nogen rock star programmør, starter vi selvfølgeligt ud med at hente arbejdet fra nogen der er. For der findes selvfølgeligt adskillige python biblioteker, der alle kan gøre vores programmerings proces endnu nemmere.</p>\n<h3>MQTT</h3>\n<p>Til MQTT delen bruger vi <a href=\"https://pypi.org/project/paho-mqtt/\"><code class=\"language-text\">paho-mqtt</code></a> biblioteket, da det giver os en <code class=\"language-text\">client</code> class, der gør det muligt at udgive beskeder på vores interne MQTT netværk.</p>\n<h3>decouple</h3>\n<p>Et andet bibliotek jeg har valgt at tage med, er langt fra nødvendigt, men jeg synes at <em>best practices</em> er gode at træne, og <code class=\"language-text\">decouple</code> kan hjælpe os til at nemt inkludere en <code class=\"language-text\">.env</code> og dens variabler/secrets i et hvert python projekt.</p>\n<p>Installer begge dependencies med</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> paho-mqtt decouple</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>.env til \"secrets\"</h2>\n<p>Nu er det jo ikke fordi jeg er nogen gammel gud i Python, tvært i mod, men selvom jeg laver et super lille projekt som sådan en MQTT publisher her, vil jeg gerne bestræbe mig efter at gøre tingene så <em>best practice</em> som giver mening. Så at skrive sensitive data som API nøgler i .env filer, o.l prøver jeg at altid have med i mit workflow. Mit ADHD har desværre et par gange efterlad API nøgler på github, så jeg tager det med i samtlige projekter herfra.</p>\n<p>Ved man ikke hvad en .env fil er, er det en (skjult) fil, der indeholder de \"secrets\" du ikke har lyst til at skal figurere i din programkode.</p>\n<p>Basicly loader man sin .env fil i koden, så man fx kan skrive <code class=\"language-text\">config(msql_pw)</code> frem for sit faktiske password til sin database, når man skal connecte til den.</p>\n<h3>Opret .env fil i dit projektmappe</h3>\n<p>Alt efter hvilket system du er på, så laver du bare en tom tekstfil som du plejer.\nJeg kører kommandoen\n<code class=\"language-text\">touch .env</code></p>\n<h3>Gem dine secrets</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">mqtt-broker<span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.1.100   <span class=\"token comment\"># Indsæt selv IP adressen til din broker</span>\nmqtt-port<span class=\"token operator\">=</span><span class=\"token number\">1883</span>              <span class=\"token comment\"># Porten er typisk 1883</span>\nmqtt-user<span class=\"token operator\">=</span>mqtt-user         <span class=\"token comment\"># Dit brugernavn til din broke</span>\nmqtt-pass<span class=\"token operator\">=</span>k0BNAv612asABXyo6mODi5jXaofI29SxHFVOEGk8JCmF4M+GJpo0g\napi-endpoint<span class=\"token operator\">=</span>https://domæne.org/api/endpoint?query<span class=\"token operator\">=</span>0secondQuery<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Og så er vi så små også ved at kunne <em>rigtigt</em> gå i gang!</p>\n<h2>Sæt i gang!</h2>\n<p>Vi starter meget klassisk vores python dokument med imports.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-py line-numbers\"><code class=\"language-py\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> decouple <span class=\"token keyword\">import</span> config\n<span class=\"token keyword\">from</span> paho<span class=\"token punctuation\">.</span>mqtt <span class=\"token keyword\">import</span> mqtt_client</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Efterfulgt af at vi declare diverse variabler</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-py line-numbers\"><code class=\"language-py\">URL <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span>api<span class=\"token operator\">-</span>endpoint<span class=\"token punctuation\">)</span>\nBROKER <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span>mqtt<span class=\"token operator\">-</span>broker<span class=\"token punctuation\">)</span>\nPORT <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span>mqtt<span class=\"token operator\">-</span>port<span class=\"token punctuation\">)</span>\nTOPIC <span class=\"token operator\">=</span> <span class=\"token string\">\"bankehuset/vand/temperatur/\"</span>\nCLIENT_ID <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'bankehuset-mqtt-</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\nUSER <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'mqtt-user'</span><span class=\"token punctuation\">)</span>\nPASS <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'mqtt-pass'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>connect_mqtt()</h3>\n<h3>publish()</h3>\n<h2>Fetch dataen fra API'en</h2>\n<h2>Publish dataen til din broker</h2>\n<h2>Komplet kode</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\nMQTT publisher\nInstaller dependencies/requirements\nmed `pip install decouple paho.mqtt`\n\"\"\"</span>\n<span class=\"token comment\">#imports</span>\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> decouple <span class=\"token keyword\">import</span> config\n<span class=\"token keyword\">from</span> paho<span class=\"token punctuation\">.</span>mqtt <span class=\"token keyword\">import</span> mqtt_client\n\n<span class=\"token comment\"># erklærer variabler</span>\nURL <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span>api<span class=\"token operator\">-</span>endpoint<span class=\"token punctuation\">)</span>\nBROKER <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span>mqtt<span class=\"token operator\">-</span>broker<span class=\"token punctuation\">)</span>\nPORT <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span>mqtt<span class=\"token operator\">-</span>port<span class=\"token punctuation\">)</span>\nTOPIC <span class=\"token operator\">=</span> <span class=\"token string\">\"bankehuset/vand/temperatur/\"</span>\nCLIENT_ID <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'bankehuset-mqtt-</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span>\nUSER <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'mqtt-user'</span><span class=\"token punctuation\">)</span>\nPASS <span class=\"token operator\">=</span> config<span class=\"token punctuation\">(</span><span class=\"token string\">'mqtt-pass'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">connect_mqtt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">on_connect</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> userdata<span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">,</span> rc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> rc <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Tilsluttede til `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>BROKER<span class=\"token punctuation\">}</span></span><span class=\"token string\">`!\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kunne ikke tilslutte, return code %d\\n\"</span><span class=\"token punctuation\">,</span> rc<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Sætter Client ID</span>\n    client <span class=\"token operator\">=</span> mqtt_client<span class=\"token punctuation\">.</span>Client<span class=\"token punctuation\">(</span>CLIENT_ID<span class=\"token punctuation\">)</span>\n    client<span class=\"token punctuation\">.</span>username_pw_set<span class=\"token punctuation\">(</span>USER<span class=\"token punctuation\">,</span> PASS<span class=\"token punctuation\">)</span>\n    client<span class=\"token punctuation\">.</span>on_connect <span class=\"token operator\">=</span> on_connect\n    client<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>BROKER<span class=\"token punctuation\">,</span> PORT<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> client\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">publish</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        RESPONSE <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>URL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        WATERTEMP <span class=\"token operator\">=</span> RESPONSE<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'temperature'</span><span class=\"token punctuation\">]</span>\n        msg <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>WATERTEMP<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span>\n        result <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>publish<span class=\"token punctuation\">(</span>TOPIC<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># result: [0, 1]</span>\n        status <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> status <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Sendte `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>msg<span class=\"token punctuation\">}</span></span><span class=\"token string\">` til `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>TOPIC<span class=\"token punctuation\">}</span></span><span class=\"token string\">`\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Kunne ikke sende `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>msg<span class=\"token punctuation\">}</span></span><span class=\"token string\">` til `</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>TOPIC<span class=\"token punctuation\">}</span></span><span class=\"token string\">`\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># Lige dette projekt kræver at opdatere oplysningerne hvert kvarter - altså 900 sekunder.</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">900</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    client <span class=\"token operator\">=</span> connect_mqtt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    client<span class=\"token punctuation\">.</span>loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    publish<span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token string\">'__name__'</span> <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"📈 Send MQTT data til din MQTT broker med Python ","date":"September 15, 2022","update":null,"tags":["python","mqtt"],"series":null},"fields":{"slug":"/send-data-med-mqtt-python/","readingTime":{"minutes":3.27}}},"seriesList":{"edges":[{"node":{"id":"fde0ad94-0739-54e2-839a-ce71725866da","fields":{"slug":"/smart-doer-telephone/"},"frontmatter":{"title":"📡 Hverdagshack: Smart Dørtelephone med Blynk"}}},{"node":{"id":"15018002-2579-5a56-ac2a-552428c21359","fields":{"slug":"/osx-ubuntu-pare-bluetooth-mus/"},"frontmatter":{"title":"🖱️ Pare bluetooth devices med dual-boot i Ubuntu og OSX"}}},{"node":{"id":"2f2a60c7-f820-5959-8e57-206495ea5fc4","fields":{"slug":"/phishing-campaign/"},"frontmatter":{"title":"🎣 Phishing kampagner tager dine penge måned for måned"}}},{"node":{"id":"017f0593-153d-5356-a05c-799818cb8779","fields":{"slug":"/rapid-prototyping/"},"frontmatter":{"title":"💨 Rapid prototyping i react (når du vitterligt ikke kan finde ud af noget!)"}}},{"node":{"id":"ecb03a62-80f0-5853-9bae-6ad6c4f59be6","fields":{"slug":"/hvorfor-linux/"},"frontmatter":{"title":"🐧 Hvorfor jeg bruger Linux - når jeg kan"}}},{"node":{"id":"61c061c4-c95f-5db1-bb23-384b2d9c83ed","fields":{"slug":"/krypterings-guide/"},"frontmatter":{"title":"🔒 Hvordan man krypterer (næsten) alt"}}},{"node":{"id":"cc086b3e-e4db-5ad0-a253-49c50b20e798","fields":{"slug":"/haveibeenpwned/"},"frontmatter":{"title":"🏴‍☠️ haveibeenpwned.com - er dit password lækket?"}}},{"node":{"id":"f4ecf7d9-f629-5a3e-9705-9ae79492e879","fields":{"slug":"/arctic-mx2-thermal-compound-testing/"},"frontmatter":{"title":"❄️ Arctic MX2 Thermal Compound"}}},{"node":{"id":"f5270d3c-a591-54db-a8d6-216826a3c860","fields":{"slug":"/server-services-sh/"},"frontmatter":{"title":"🐕‍🦺 server-services"}}},{"node":{"id":"6a995d76-f15b-5d34-a103-fc73921105d0","fields":{"slug":"/router-reboot/"},"frontmatter":{"title":"🛟 router-reboot"}}},{"node":{"id":"d628e0fd-b259-5e93-8f9d-010759e0ba71","fields":{"slug":"/confirm-sh/"},"frontmatter":{"title":"🫡 confirm"}}},{"node":{"id":"06a00f8a-0ac5-5c72-af9a-713bcee1437e","fields":{"slug":"/hermitcraft-picker/"},"frontmatter":{"title":"⛏️ Hermitcraft Youtube Picker"}}},{"node":{"id":"cb546a58-959b-5503-a763-4bfc475b6e1f","fields":{"slug":"/hibp-lookup/"},"frontmatter":{"title":"💻 hibp %pw%"}}},{"node":{"id":"6ed4f0d2-86c5-53b2-92d8-7532a164a3cd","fields":{"slug":"/linkhandler-sh/"},"frontmatter":{"title":"💻 linkhandler %url%"}}},{"node":{"id":"c30bbe0d-49ef-5dde-8526-e57d69e086b0","fields":{"slug":"/localhost-docker/"},"frontmatter":{"title":"🐳 Lokal startside med Docker"}}},{"node":{"id":"75d5549c-0a7b-5031-b004-696da0a39ac4","fields":{"slug":"/password-generators/"},"frontmatter":{"title":"💻 Password generators"}}},{"node":{"id":"6aa194f8-bb92-5d5e-98f6-a39da1e24b34","fields":{"slug":"/pomodoro-sh/"},"frontmatter":{"title":"🍅 pomodoro"}}},{"node":{"id":"8774ae1d-20fd-5c32-ae70-5adbb42fd7ab","fields":{"slug":"/folder-backup-with-python/"},"frontmatter":{"title":"🗜️ python-zip-folder"}}},{"node":{"id":"35fb5af6-7a93-50d1-a4f8-0770b57a7da1","fields":{"slug":"/tingfinder-py/"},"frontmatter":{"title":"🔍 tingfinder.py"}}},{"node":{"id":"e7696277-7c4f-5e37-aa36-a25b1188d46f","fields":{"slug":"/notevim/"},"frontmatter":{"title":"🗒️ nvim notetaker"}}},{"node":{"id":"bdbb0f2f-d078-5fd6-a323-ac38cfe50117","fields":{"slug":"/adhd-tech/"},"frontmatter":{"title":"🧠 ADHD og TECH"}}},{"node":{"id":"13a002d2-ec72-5b30-9a76-61c22b87ac11","fields":{"slug":"/nvmacropad/"},"frontmatter":{"title":"🤖 NV Macropad - Prototype"}}},{"node":{"id":"47920522-a8db-5831-8284-bdc90833e7e6","fields":{"slug":"/bankehuset-projekt/"},"frontmatter":{"title":"🛀 BANKEHUSET badevands projektet"}}},{"node":{"id":"d66728e3-5bb7-5918-8b40-1789a8a4ff4f","fields":{"slug":"/send-data-med-mqtt-python/"},"frontmatter":{"title":"📈 Send MQTT data til din MQTT broker med Python "}}}]},"previous":{"fields":{"slug":"/bankehuset-projekt/"},"frontmatter":{"title":"🛀 BANKEHUSET badevands projektet"}},"next":null},"pageContext":{"id":"d66728e3-5bb7-5918-8b40-1789a8a4ff4f","series":null,"previousPostId":"47920522-a8db-5831-8284-bdc90833e7e6","nextPostId":null}},"staticQueryHashes":[]}